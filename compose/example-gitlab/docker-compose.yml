#
# This a LEGACY compose recipe working with
# jwilder/nginx-proxy. I separated each service here
# because jwilder/nginx-proxy can't support multiple PORT binding on
# http services on a single container.
# Use traefik setup for newer setups.
#
# Replace HOSTNAME with your gitlab domain,
# REGISTRY_HOSTNAME with your gitlab.registry domain and
# MATTERMOST_HOSTNAME with your mattermost domain
# these MUST be different
#
version: '3'
services:
  web:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    # I had problems with the health check. Sometimes it reported unhealthyness and therefore Traefik removed
    # the container, so I turned it off. Maybe it works by now.
    healthcheck:
      disable: true
    environment:
      VIRTUAL_HOST: HOSTNAME
      LETSENCRYPT_HOST: HOSTNAME
      LETSENCRYPT_EMAIL: YOUREMAIL
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://HOSTNAME'
        nginx['redirect_http_to_https'] = false
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['proxy_set_headers'] = {
          'X-Forwarded-Proto' => 'https',
          'X-Forwarded-Ssl' => 'on'
        }
        nginx['client_max_body_size'] = '2G'
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = ""
        gitlab_rails['smtp_port'] = 587
        gitlab_rails['smtp_user_name'] = ""
        gitlab_rails['smtp_password'] = ""
        gitlab_rails['smtp_domain'] = ""
        gitlab_rails['smtp_authentication'] = "login"
        gitlab_rails['smtp_enable_starttls_auto'] = true
        gitlab_rails['gitlab_email_from'] = 'gitlab@HOSTNAME'
        gitlab_rails['gitlab_email_display_name'] = 'Gitlab'
        gitlab_rails['gitlab_email_reply_to'] = 'noreply@HOSTNAME'
        unicorn['worker_timeout'] = 60
        unicorn['worker_processes'] = 2
        sidekiq['concurrency'] = 15
        postgresql['shared_buffers'] = "512MB"
        gitlab_rails['artifacts_enabled'] = true
        gitlab_rails['artifacts_path'] = "/var/opt/gitlab/gitlab-artifacts"
        gitlab_rails['lfs_enabled'] = true
        gitlab_rails['backup_keep_time'] = 172600
        gitlab_ci['backup_keep_time'] = 172600
        gitlab_rails['time_zone'] = "Europe/Paris"
        #
        # Docker registry
        #
        #registry_external_url 'https://REGISTRY_HOSTNAME'
        #gitlab_rails['registry_enabled'] = true
        #gitlab_rails['registry_issuer'] = "omnibus-gitlab-issuer"

        #
        # First run this stack before
        # configuring Mattermost
        #
        #mattermost_external_url 'https://MATTERMOST_HOSTNAME'
        #mattermost['enable'] = true
        #mattermost_nginx['listen_port'] = 80
        #mattermost_nginx['listen_https'] = false
        #mattermost['service_use_ssl'] = true
        #mattermost['gitlab_id'] = "xxxx"
        #mattermost['gitlab_secret'] = "xxxx"
        #mattermost['gitlab_scope'] = "read_user"
        #mattermost['gitlab_auth_endpoint'] = "https://HOSTNAME/oauth/authorize"
        #mattermost['gitlab_token_endpoint'] = "https://HOSTNAME/oauth/token"
        #mattermost['gitlab_user_api_endpoint'] = "https://HOSTNAME/api/v4/user"
        #mattermost_nginx['redirect_http_to_https'] = false
        #mattermost_nginx['ssl_certificate'] = "/etc/gitlab/ssl/MATTERMOST_HOSTNAME.crt"
        #mattermost_nginx['ssl_certificate_key'] = "/etc/gitlab/ssl/MATTERMOST_HOSTNAME.key"
        #mattermost_nginx['proxy_set_headers'] = {
        #  "X-Forwarded-Proto" => "https",
        #  "X-Forwarded-Ssl" => "on",
        #}


    ports:
      # Make sure your host 22 port is not already taken by SSH
      # We encorage you to change you host SSH port to reserve it for Gitlab
      - '22:22'
    volumes:
      # Use host volumes instead of docker named volumes for better config access
      - '/srv/gitlab/config:/etc/gitlab'
      - '/srv/gitlab/logs:/var/log/gitlab'
      - '/srv/gitlab/data:/var/opt/gitlab'
      #
      # First run this stack before
      # using letsencrypt certs !
      #
      # Gitlab Nginx wonâ€™t be able to start before you uncomment these lines
      # but wait for the second start-up: docker-compose up -d --force-recreate
      #
      #- '/root/docker-server-env/front-proxy/certs/HOSTNAME/fullchain.pem:/etc/gitlab/ssl/HOSTNAME.crt:ro'
      #- '/root/docker-server-env/front-proxy/certs/HOSTNAME/key.pem:/etc/gitlab/ssl/HOSTNAME.key:ro'
      #- '/root/docker-server-env/front-proxy/certs/REGISTRY_HOSTNAME/fullchain.pem:/etc/gitlab/ssl/REGISTRY_HOSTNAME.crt:ro'
      #- '/root/docker-server-env/front-proxy/certs/REGISTRY_HOSTNAME/key.pem:/etc/gitlab/ssl/REGISTRY_HOSTNAME.key:ro'
      ## Use gitlab cert for mattermost
      #- '/root/docker-server-env/front-proxy/certs/HOSTNAME/fullchain.pem:/etc/gitlab/ssl/MATTERMOST_HOSTNAME.crt:ro'
      #- '/root/docker-server-env/front-proxy/certs/HOSTNAME/key.pem:/etc/gitlab/ssl/MATTERMOST_HOSTNAME.key:ro'

  #
  # Create a docker registry
  # to host docker images
  #
  #registry:
  #  restart: always
  #  image: registry:2
  #  hostname: 'REGISTRY_HOSTNAME'
  #  # I had problems with the health check. Sometimes it reported unhealthyness and therefore Traefik removed
  #  # the container, so I turned it off. Maybe it works by now.
  #  healthcheck:
  #    disable: true
  #  volumes:
  #    - '/srv/gitlab/data/gitlab-rails/shared/registry:/registry'
  #    #
  #    # First run this stack before
  #    # using letsencrypt certs !
  #    #
  #    #- '/root/docker-server-env/front-proxy/certs/REGISTRY_HOSTNAME/fullchain.pem:/certs/REGISTRY_HOSTNAME.crt:ro'
  #    #- '/root/docker-server-env/front-proxy/certs/REGISTRY_HOSTNAME/key.pem:/certs/REGISTRY_HOSTNAME.key:ro'
  #    #- '/srv/gitlab/data/registry/gitlab-registry.crt:/certs/gitlab-registry.crt:ro'
  #  environment:
  #    VIRTUAL_HOST: REGISTRY_HOSTNAME
  #    # Tells nginx proxy to forward on port 5000
  #    # and get a clean and nice registry URL
  #    VIRTUAL_PORT: 5000
  #    LETSENCRYPT_HOST: REGISTRY_HOSTNAME
  #    LETSENCRYPT_EMAIL: YOUREMAIL
  #    REGISTRY_LOG_LEVEL: info
  #    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /registry
  #    REGISTRY_AUTH: token
  #    REGISTRY_AUTH_TOKEN_REALM: https://HOSTNAME/jwt/auth
  #    REGISTRY_AUTH_TOKEN_SERVICE: container_registry
  #    REGISTRY_AUTH_TOKEN_ISSUER: omnibus-gitlab-issuer
  #    REGISTRY_AUTH_TOKEN_AUTOREDIRECT: 'False'
  #    REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /certs/gitlab-registry.crt
  #    REGISTRY_STORAGE_DELETE_ENABLED: 'true'
  #  networks:
  #    default:
  #      aliases:
  #        - "REGISTRY_HOSTNAME"

networks:
  default:
    external:
      name: frontproxynet
