version: '3'

services:
  traefik:
    image: traefik:2.1
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - frontproxynet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/traefik.toml
      - ./acme.json:/acme.json
      - ./access.log:/access.log
    container_name: traefik
    labels:
      - "traefik.enable=true"

      # Listen HTTP
      - "traefik.http.routers.api.rule=Host(${MONITORING_HOST})"
      - "traefik.http.routers.api.service=api@internal"

      # Apply middlewares
      - "traefik.http.routers.api.middlewares=auth"

      # Use Basic auth
      - "traefik.http.middlewares.auth.basicauth.users=${MONITORING_AUTH_BASIC}"

      # Use IP Whitelisting
      - "traefik.http.middlewares.iPWhitelist.ipwhitelist.sourcerange=(${IP_RANGE})"
      - "traefik.http.middlewares.iPWhitelist.ipwhitelist.ipstrategy.depth=1"


  # Watch acme.json and dump certificates to files
  certdumper:
    container_name: traefik_certdumper
    image: alpine:latest
    depends_on:
      - traefik
    restart: unless-stopped
    volumes:
      - ./:/traefik
    command: >
      ash -c " \
        apk --no-cache add inotify-tools jq openssl util-linux bash && \
        wget https://raw.githubusercontent.com/containous/traefik/v1.7/contrib/scripts/dumpcerts.sh -O dumpcerts.sh && \
        mkdir -p /traefik/ssl/ && \
        while true; do \
          inotifywait -e modify /traefik/acme.json && \
            bash dumpcerts.sh /traefik/acme.json /traefik/ssl/ && \
            ln -f /traefik/ssl/certs/* /traefik/ssl/ && \
            ln -f /traefik/ssl/private/* /traefik/ssl/; \
        done"

networks:
  frontproxynet:
    external: true
